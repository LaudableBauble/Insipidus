/// General thoughts on the Battle Structure

Every character active in a battle can, when idle, launch an attack on another character. In order for the battle to unfold as smoothly as possible
the battle coordinator 'chunks' up the battle into short turns. Every turn the coordinator decides which newly launched moves are legit and which are not.
If a move is valid, both the user and target is informed of this. Before an attack is officialy launched (ie. the coordinator has approved it) its outcome is calculated.
Depending on the outcome the attack's animation will take on different forms, as well as the final damage calculations to either character.
If an attack has been launched its battle animation is activated and when it has reached a certain point, ie. finished the build-up sequence, it takes control
over the target of the attack and performs various animations on it. When the attack is over both character is set back into a state of idleness, ready to launch an
attack again.

The battle animations are dictated by a set of rules which in turn is placed into a timeline. At the beginning of the move the timeline is started and every time
it reaches a rule an event is fired. This event is transformed into a battle action that will physically express these rules.

So far all events have a duration during which they need to conclude their business, but what if they do not manage to? For example, what if a simple Slam attack was
executed and the distance to the target is farther away than the duration of the event permits the user to travel? Or the other way around, what if the attack is
concluded before the set time? To further complicate matters, what if one event is dependent upon another?

The solution to these problems will be to split the events into two categories; duration-specific and action-specific. Action-specific events happen instantaneously
at the given starting time, whereas duration-specific events are active during a set duration. If an event is dependent on another (split into start or end-dependent)
it will only be activated after the source event is triggered. In this case the starting time set onto the dependent event is relative to the source event, not the
timeline's elapsed time.

- Thoughts on a more direct battle structure

Instead of using a strictly choreographed battle system a more direct variant would perhaps be more beneficial. All attacks are still animations based upon the
timeline-formula already developed but they depend less upon the interaction between participants. A tackle for example uses an animation where the user leaps towards
the target, but instead of choreographing a collision the engine will let the it happen on its own. The only responsibility each participant needs to take is
notifying each other when an attack is launched, the outcome of it and when it lands. Let the target behave appropriately on his own; do not include that animation
into the attack.

It would be easier if the full range of battle animations were known and if a scriptable pattern could be discerned between them.

Types of attack animation events:
- Movement, ie. Attack or Scratch.
- Projectile, ie. Ember or Stun Powder.
- Effects, ie. Curse or Wish.
- Modifier, all attacks and moves.

Out of those four event types only the effects-variant is based upon duration, all the other are direct and tries to finish as soon as possible. There are however
a few differences between them in how they are set up.

Movement - Needs a destination point and type of movement (ie. walk, run or jump).
Projectile - Needs direction or target position and type of projectile.
Effects - Needs duration, location and type of effect.
Modify - Needs stat and the value to change it with (ie. health, defense or energy).

In order for an attack or move to fail only one of its event may fail. If for example a movement event fails (which it will if there is no collision at the destination
point or during the movement) it means that the target has dodged the attack (or moved by some other reason; not important) and the attack will thus fail.

/// Battle Events

The first three events are good as they are but the fourth, the Modify event, needs some tweaking. The problem lies in the fact that there exists practically an
infinite number of changes and results to be had and it is hard to design a single event that encompasses all of these multitude of posibilities. For example,
besides changing health or other stats an attack may want to affect the weather or time of day. How do we keep the event as simple as possible while still allowing it
to retain a wide array of areas to influence?
One solution for this may be to split up the event into as many as there are stats/aspects to modify.

- Basic

	Description: This event will act as a base for all other battle events.

	Arguments:
		Start: The time to start the event.
		Dependence: Optional event to be dependent upon, for example to start after the end of the other event.

- Movement
	
	Description: This event is used when an attack requires some sort of movement from either participant.
	
	Arguments:
		Entity: The entity to move.
		Destination: The destination to move to. Note: Cannot be an immutable locator or homing will not work.
		Homing: Whether the movement will home in on the destination point, for example if it moves.
		Type: The type of movement (ie. walk, run or jump).

- Projectile

	Description: This event is used when an attack requires some sort of projectile to be launched.

	Arguments:
		Position: The starting position of the projectile.
		Destination: The destination of the projectile. Note: Cannot be an immutable locator or homing will not work.
		Homing: Whether the projectile will home in on the destination point, for example if it moves.
		Type: The type of projectile (ie. sprite, speed etc).

 - Effects

	Description: This event is used when an attack requires some sort of effect to be displayed.

	Arguments:
		Position: The position of the effect.
		Duration: The duration of the effect.
		Type: The type of effect (ie. particles, sprite or screen shake)

 - Modify

	Description: This event is used when an attack requires some sort of modification to be made, for example changing an character's stats.

	Arguments:
		Entity: The entity who's stats to change.
		Amount: The amount of change.
		Type: The type of stat to change.